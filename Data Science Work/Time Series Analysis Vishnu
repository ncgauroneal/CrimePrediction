{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "ML Projecton Chicago Crime Dataset.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "e7dUU-Ehqsfb",
        "outputId": "108e8168-9ecf-471c-fa59-e7e7ff90f6a5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "\n",
        "\n",
        "#https://matplotlib.org/gallery/color/named_colors.html\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import statsmodels.api as sm\n",
        "import math \n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n",
        "\n",
        "from scipy import stats\n",
        "from scipy.stats import kurtosis, skew\n",
        "\n",
        "%matplotlib inline\n",
        "\n",
        "# load the data\n",
        "#path =r\"C:\\Users\\305197\\OneDrive - Petco Animal Supplies\\OneDrive-2019-03-29\\oil_exxon.xlsx\"\n",
        "#path = 'C:\\\\Users\\\\Instructor\\\\Documents\\\\python\\\\monet.csv'\n",
        "#df_price_data = pd.read_csv(path)\n",
        "#df_bonus = pd.read_csv(path)\n",
        "# set the index equal to the date column & then drop the old date column\n",
        "#price_data.index = pd.to_datetime(price_data['date'])\n",
        "#price_data = price_data.drop(['date'], axis = 1)\n",
        "\n",
        "# print the first five rows\n",
        "#price_data.head()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "68zpT8WzsmJ3"
      },
      "source": [
        "!pip install -U -q PyDrive\n",
        "from pydrive.auth import GoogleAuth\n",
        "from pydrive.drive import GoogleDrive\n",
        "from google.colab import auth\n",
        "from oauth2client.client import GoogleCredentials"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lK1v3u3ysroB"
      },
      "source": [
        "auth.authenticate_user()\n",
        "gauth = GoogleAuth()\n",
        "gauth.credentials = GoogleCredentials.get_application_default()\n",
        "drive = GoogleDrive(gauth)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AGAd5s0gs1jZ"
      },
      "source": [
        "downloaded = drive.CreateFile({'id':'1f3aSwjKkf-8z1R2TuByeQ9nDJrIxq9hw'}) # replace the id with id of file you want to access\n",
        "downloaded.GetContentFile('data(1).csv') "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bHlDuBbbs4W3",
        "outputId": "012da15e-2516-4df4-9aa5-a9d707870975",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 741
        }
      },
      "source": [
        "df = pd.read_csv('data(1).csv') \n",
        "df['DateTime'] = pd.to_datetime(df['date'])\n",
        "df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Unnamed: 0.1</th>\n",
              "      <th>unique_key</th>\n",
              "      <th>case_number</th>\n",
              "      <th>date</th>\n",
              "      <th>block</th>\n",
              "      <th>iucr</th>\n",
              "      <th>primary_type</th>\n",
              "      <th>description</th>\n",
              "      <th>location_description</th>\n",
              "      <th>arrest</th>\n",
              "      <th>domestic</th>\n",
              "      <th>beat</th>\n",
              "      <th>district</th>\n",
              "      <th>ward</th>\n",
              "      <th>community_area</th>\n",
              "      <th>fbi_code</th>\n",
              "      <th>x_coordinate</th>\n",
              "      <th>y_coordinate</th>\n",
              "      <th>year</th>\n",
              "      <th>updated_on</th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>location</th>\n",
              "      <th>DateTime</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4001774</td>\n",
              "      <td>4001774</td>\n",
              "      <td>4324667</td>\n",
              "      <td>HL629300</td>\n",
              "      <td>2005-09-22 19:55:41+00:00</td>\n",
              "      <td>026XX N HOYNE AVE</td>\n",
              "      <td>1350</td>\n",
              "      <td>CRIMINAL TRESPASS</td>\n",
              "      <td>TO STATE SUP LAND</td>\n",
              "      <td>CHA PARKING LOT/GROUNDS</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>1913</td>\n",
              "      <td>19.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>26</td>\n",
              "      <td>1162364.0</td>\n",
              "      <td>1917615.0</td>\n",
              "      <td>2005</td>\n",
              "      <td>2018-02-10 15:50:01+00:00</td>\n",
              "      <td>41.929597</td>\n",
              "      <td>-87.678774</td>\n",
              "      <td>(41.929597339, -87.678773892)</td>\n",
              "      <td>2005-09-22 19:55:41+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6518132</td>\n",
              "      <td>6518132</td>\n",
              "      <td>10349385</td>\n",
              "      <td>HY540220</td>\n",
              "      <td>2015-12-17 00:01:00+00:00</td>\n",
              "      <td>077XX S AVALON AVE</td>\n",
              "      <td>0910</td>\n",
              "      <td>MOTOR VEHICLE THEFT</td>\n",
              "      <td>AUTOMOBILE</td>\n",
              "      <td>STREET</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>411</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>07</td>\n",
              "      <td>1185889.0</td>\n",
              "      <td>1853900.0</td>\n",
              "      <td>2015</td>\n",
              "      <td>2018-02-10 15:50:01+00:00</td>\n",
              "      <td>41.754235</td>\n",
              "      <td>-87.594342</td>\n",
              "      <td>(41.754234523, -87.594341856)</td>\n",
              "      <td>2015-12-17 00:01:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2537554</td>\n",
              "      <td>2537554</td>\n",
              "      <td>6225576</td>\n",
              "      <td>HP312801</td>\n",
              "      <td>2008-03-18 17:00:00+00:00</td>\n",
              "      <td>058XX W BELMONT AVE</td>\n",
              "      <td>1110</td>\n",
              "      <td>DECEPTIVE PRACTICE</td>\n",
              "      <td>BOGUS CHECK</td>\n",
              "      <td>ATM (AUTOMATIC TELLER MACHINE)</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>1633</td>\n",
              "      <td>16.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>11</td>\n",
              "      <td>1136688.0</td>\n",
              "      <td>1920673.0</td>\n",
              "      <td>2008</td>\n",
              "      <td>2018-02-28 15:56:25+00:00</td>\n",
              "      <td>41.938488</td>\n",
              "      <td>-87.773054</td>\n",
              "      <td>(41.938487938, -87.77305366)</td>\n",
              "      <td>2008-03-18 17:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4089395</td>\n",
              "      <td>4089395</td>\n",
              "      <td>7217499</td>\n",
              "      <td>HR633143</td>\n",
              "      <td>2009-11-08 18:00:00+00:00</td>\n",
              "      <td>013XX N ROCKWELL ST</td>\n",
              "      <td>0320</td>\n",
              "      <td>ROBBERY</td>\n",
              "      <td>STRONGARM - NO WEAPON</td>\n",
              "      <td>SIDEWALK</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>1423</td>\n",
              "      <td>14.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>03</td>\n",
              "      <td>1158831.0</td>\n",
              "      <td>1908634.0</td>\n",
              "      <td>2009</td>\n",
              "      <td>2018-02-28 15:56:25+00:00</td>\n",
              "      <td>41.905026</td>\n",
              "      <td>-87.692003</td>\n",
              "      <td>(41.905026073, -87.692003482)</td>\n",
              "      <td>2009-11-08 18:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5677118</td>\n",
              "      <td>5677118</td>\n",
              "      <td>3313381</td>\n",
              "      <td>HK350115</td>\n",
              "      <td>2004-05-08 03:30:00+00:00</td>\n",
              "      <td>029XX S DEARBORN ST</td>\n",
              "      <td>1365</td>\n",
              "      <td>CRIMINAL TRESPASS</td>\n",
              "      <td>TO RESIDENCE</td>\n",
              "      <td>CHA APARTMENT</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>2113</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>26</td>\n",
              "      <td>1176241.0</td>\n",
              "      <td>1885750.0</td>\n",
              "      <td>2004</td>\n",
              "      <td>2018-02-28 15:56:25+00:00</td>\n",
              "      <td>41.841856</td>\n",
              "      <td>-87.628742</td>\n",
              "      <td>(41.841855999, -87.628741678)</td>\n",
              "      <td>2004-05-08 03:30:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>499995</th>\n",
              "      <td>3977215</td>\n",
              "      <td>3977215</td>\n",
              "      <td>2832042</td>\n",
              "      <td>HJ494685</td>\n",
              "      <td>2002-12-27 13:00:00+00:00</td>\n",
              "      <td>002XX E OHIO ST</td>\n",
              "      <td>0890</td>\n",
              "      <td>THEFT</td>\n",
              "      <td>FROM BUILDING</td>\n",
              "      <td>OTHER</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>1834</td>\n",
              "      <td>18.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>06</td>\n",
              "      <td>1177936.0</td>\n",
              "      <td>1904246.0</td>\n",
              "      <td>2002</td>\n",
              "      <td>2018-02-28 15:56:25+00:00</td>\n",
              "      <td>41.892572</td>\n",
              "      <td>-87.621959</td>\n",
              "      <td>(41.892571811, -87.621959165)</td>\n",
              "      <td>2002-12-27 13:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>499996</th>\n",
              "      <td>17782</td>\n",
              "      <td>17782</td>\n",
              "      <td>1837035</td>\n",
              "      <td>G667498</td>\n",
              "      <td>2001-11-05 20:40:00+00:00</td>\n",
              "      <td>024XX N KILDARE AV</td>\n",
              "      <td>2022</td>\n",
              "      <td>NARCOTICS</td>\n",
              "      <td>POSS: COCAINE</td>\n",
              "      <td>SIDEWALK</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>2524</td>\n",
              "      <td>25.0</td>\n",
              "      <td>28.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>18</td>\n",
              "      <td>1147270.0</td>\n",
              "      <td>1915848.0</td>\n",
              "      <td>2001</td>\n",
              "      <td>2015-08-17 15:03:40+00:00</td>\n",
              "      <td>41.925051</td>\n",
              "      <td>-87.734286</td>\n",
              "      <td>(41.92505133, -87.734285837)</td>\n",
              "      <td>2001-11-05 20:40:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>499997</th>\n",
              "      <td>3446950</td>\n",
              "      <td>3446950</td>\n",
              "      <td>6309414</td>\n",
              "      <td>HP397430</td>\n",
              "      <td>2008-06-15 21:45:00+00:00</td>\n",
              "      <td>002XX S OAKLEY BLVD</td>\n",
              "      <td>2220</td>\n",
              "      <td>LIQUOR LAW VIOLATION</td>\n",
              "      <td>ILLEGAL POSSESSION BY MINOR</td>\n",
              "      <td>VEHICLE NON-COMMERCIAL</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>1211</td>\n",
              "      <td>12.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>28.0</td>\n",
              "      <td>22</td>\n",
              "      <td>1161112.0</td>\n",
              "      <td>1898934.0</td>\n",
              "      <td>2008</td>\n",
              "      <td>2018-02-10 15:50:01+00:00</td>\n",
              "      <td>41.878361</td>\n",
              "      <td>-87.683894</td>\n",
              "      <td>(41.878361361, -87.683894347)</td>\n",
              "      <td>2008-06-15 21:45:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>499998</th>\n",
              "      <td>6193966</td>\n",
              "      <td>6193966</td>\n",
              "      <td>11599307</td>\n",
              "      <td>JC156816</td>\n",
              "      <td>2019-02-17 08:00:00+00:00</td>\n",
              "      <td>029XX N LINCOLN AVE</td>\n",
              "      <td>0890</td>\n",
              "      <td>THEFT</td>\n",
              "      <td>FROM BUILDING</td>\n",
              "      <td>RESIDENCE PORCH/HALLWAY</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>1933</td>\n",
              "      <td>19.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>06</td>\n",
              "      <td>1166816.0</td>\n",
              "      <td>1919677.0</td>\n",
              "      <td>2019</td>\n",
              "      <td>2019-02-24 16:09:21+00:00</td>\n",
              "      <td>41.935161</td>\n",
              "      <td>-87.662355</td>\n",
              "      <td>(41.935161145, -87.6623548)</td>\n",
              "      <td>2019-02-17 08:00:00+00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>499999</th>\n",
              "      <td>1288119</td>\n",
              "      <td>1288119</td>\n",
              "      <td>10996556</td>\n",
              "      <td>JA324014</td>\n",
              "      <td>2017-06-26 20:30:00+00:00</td>\n",
              "      <td>011XX S CANAL ST</td>\n",
              "      <td>0890</td>\n",
              "      <td>THEFT</td>\n",
              "      <td>FROM BUILDING</td>\n",
              "      <td>ATHLETIC CLUB</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>124</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>28.0</td>\n",
              "      <td>06</td>\n",
              "      <td>1173303.0</td>\n",
              "      <td>1895451.0</td>\n",
              "      <td>2017</td>\n",
              "      <td>2018-02-10 15:50:01+00:00</td>\n",
              "      <td>41.868542</td>\n",
              "      <td>-87.639235</td>\n",
              "      <td>(41.868541914, -87.639235361)</td>\n",
              "      <td>2017-06-26 20:30:00+00:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>500000 rows × 25 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        Unnamed: 0  ...                  DateTime\n",
              "0          4001774  ... 2005-09-22 19:55:41+00:00\n",
              "1          6518132  ... 2015-12-17 00:01:00+00:00\n",
              "2          2537554  ... 2008-03-18 17:00:00+00:00\n",
              "3          4089395  ... 2009-11-08 18:00:00+00:00\n",
              "4          5677118  ... 2004-05-08 03:30:00+00:00\n",
              "...            ...  ...                       ...\n",
              "499995     3977215  ... 2002-12-27 13:00:00+00:00\n",
              "499996       17782  ... 2001-11-05 20:40:00+00:00\n",
              "499997     3446950  ... 2008-06-15 21:45:00+00:00\n",
              "499998     6193966  ... 2019-02-17 08:00:00+00:00\n",
              "499999     1288119  ... 2017-06-26 20:30:00+00:00\n",
              "\n",
              "[500000 rows x 25 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rkuwL_RIMCxX",
        "outputId": "fc390470-0343-4f99-bfd9-2aea84377e24",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "df.dtypes"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Unnamed: 0                            int64\n",
              "Unnamed: 0.1                          int64\n",
              "unique_key                            int64\n",
              "case_number                          object\n",
              "date                                 object\n",
              "block                                object\n",
              "iucr                                 object\n",
              "primary_type                         object\n",
              "description                          object\n",
              "location_description                 object\n",
              "arrest                                 bool\n",
              "domestic                               bool\n",
              "beat                                  int64\n",
              "district                            float64\n",
              "ward                                float64\n",
              "community_area                      float64\n",
              "fbi_code                             object\n",
              "x_coordinate                        float64\n",
              "y_coordinate                        float64\n",
              "year                                  int64\n",
              "updated_on                           object\n",
              "latitude                            float64\n",
              "longitude                           float64\n",
              "location                             object\n",
              "DateTime                datetime64[ns, UTC]\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "68g6sqJFDH4R"
      },
      "source": [
        "df['date'] = df['DateTime'].dt.date\n",
        "df['time'] = df['DateTime'].dt.time\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xe6M-s-6QBHf"
      },
      "source": [
        "df['day'] = df['DateTime'].dt.day\n",
        "df['month'] = df['DateTime'].dt.month\n",
        "df['year'] = df['DateTime'].dt.year\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eTswkpakQp4g"
      },
      "source": [
        "df1 = df[[\"date\", 'month', 'day', 'year', \"time\",\"case_number\",\"DateTime\",\"primary_type\", \"domestic\"]]\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g_YKsbnTrzUy",
        "outputId": "335152af-b0d6-496f-b9fa-596615eebc8e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "df1.loc[df1['month'] == 1, 'season'] = 'winter'  \n",
        "df1.loc[df1['month'] == 2, 'season'] = 'winter'  \n",
        "df1.loc[df1['month'] == 3, 'season'] = 'spring'  \n",
        "df1.loc[df1['month'] == 4, 'season'] = 'spring'  \n",
        "df1.loc[df1['month'] == 5, 'season'] = 'spring'  \n",
        "df1.loc[df1['month'] == 6, 'season'] = 'summer'  \n",
        "df1.loc[df1['month'] == 7, 'season'] = 'summer'  \n",
        "df1.loc[df1['month'] == 8, 'season'] = 'summer'  \n",
        "df1.loc[df1['month'] == 9, 'season'] = 'fall'  \n",
        "df1.loc[df1['month'] == 10, 'season'] = 'fall'  \n",
        "df1.loc[df1['month'] == 11, 'season'] = 'fall'  \n",
        "df1.loc[df1['month'] == 12, 'season'] = 'winter'  "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self.obj[key] = _infer_fill_value(value)\n",
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  isetter(loc, value)\n",
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  isetter(loc, value)\n",
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  isetter(loc, value)\n",
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  isetter(loc, value)\n",
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  isetter(loc, value)\n",
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  isetter(loc, value)\n",
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  isetter(loc, value)\n",
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  isetter(loc, value)\n",
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  isetter(loc, value)\n",
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  isetter(loc, value)\n",
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  isetter(loc, value)\n",
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  isetter(loc, value)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KkFWD-YtWIxd",
        "outputId": "c5e0d36b-4ef4-46d2-8854-aad15b7a112f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        }
      },
      "source": [
        "df1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "      <th>year</th>\n",
              "      <th>time</th>\n",
              "      <th>case_number</th>\n",
              "      <th>DateTime</th>\n",
              "      <th>primary_type</th>\n",
              "      <th>domestic</th>\n",
              "      <th>season</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2005-09-22</td>\n",
              "      <td>9</td>\n",
              "      <td>22</td>\n",
              "      <td>2005</td>\n",
              "      <td>19:55:41</td>\n",
              "      <td>HL629300</td>\n",
              "      <td>2005-09-22 19:55:41+00:00</td>\n",
              "      <td>CRIMINAL TRESPASS</td>\n",
              "      <td>False</td>\n",
              "      <td>fall</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2015-12-17</td>\n",
              "      <td>12</td>\n",
              "      <td>17</td>\n",
              "      <td>2015</td>\n",
              "      <td>00:01:00</td>\n",
              "      <td>HY540220</td>\n",
              "      <td>2015-12-17 00:01:00+00:00</td>\n",
              "      <td>MOTOR VEHICLE THEFT</td>\n",
              "      <td>False</td>\n",
              "      <td>winter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2008-03-18</td>\n",
              "      <td>3</td>\n",
              "      <td>18</td>\n",
              "      <td>2008</td>\n",
              "      <td>17:00:00</td>\n",
              "      <td>HP312801</td>\n",
              "      <td>2008-03-18 17:00:00+00:00</td>\n",
              "      <td>DECEPTIVE PRACTICE</td>\n",
              "      <td>False</td>\n",
              "      <td>spring</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2009-11-08</td>\n",
              "      <td>11</td>\n",
              "      <td>8</td>\n",
              "      <td>2009</td>\n",
              "      <td>18:00:00</td>\n",
              "      <td>HR633143</td>\n",
              "      <td>2009-11-08 18:00:00+00:00</td>\n",
              "      <td>ROBBERY</td>\n",
              "      <td>False</td>\n",
              "      <td>fall</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2004-05-08</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "      <td>2004</td>\n",
              "      <td>03:30:00</td>\n",
              "      <td>HK350115</td>\n",
              "      <td>2004-05-08 03:30:00+00:00</td>\n",
              "      <td>CRIMINAL TRESPASS</td>\n",
              "      <td>False</td>\n",
              "      <td>spring</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>499995</th>\n",
              "      <td>2002-12-27</td>\n",
              "      <td>12</td>\n",
              "      <td>27</td>\n",
              "      <td>2002</td>\n",
              "      <td>13:00:00</td>\n",
              "      <td>HJ494685</td>\n",
              "      <td>2002-12-27 13:00:00+00:00</td>\n",
              "      <td>THEFT</td>\n",
              "      <td>False</td>\n",
              "      <td>winter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>499996</th>\n",
              "      <td>2001-11-05</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>2001</td>\n",
              "      <td>20:40:00</td>\n",
              "      <td>G667498</td>\n",
              "      <td>2001-11-05 20:40:00+00:00</td>\n",
              "      <td>NARCOTICS</td>\n",
              "      <td>False</td>\n",
              "      <td>fall</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>499997</th>\n",
              "      <td>2008-06-15</td>\n",
              "      <td>6</td>\n",
              "      <td>15</td>\n",
              "      <td>2008</td>\n",
              "      <td>21:45:00</td>\n",
              "      <td>HP397430</td>\n",
              "      <td>2008-06-15 21:45:00+00:00</td>\n",
              "      <td>LIQUOR LAW VIOLATION</td>\n",
              "      <td>False</td>\n",
              "      <td>summer</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>499998</th>\n",
              "      <td>2019-02-17</td>\n",
              "      <td>2</td>\n",
              "      <td>17</td>\n",
              "      <td>2019</td>\n",
              "      <td>08:00:00</td>\n",
              "      <td>JC156816</td>\n",
              "      <td>2019-02-17 08:00:00+00:00</td>\n",
              "      <td>THEFT</td>\n",
              "      <td>False</td>\n",
              "      <td>winter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>499999</th>\n",
              "      <td>2017-06-26</td>\n",
              "      <td>6</td>\n",
              "      <td>26</td>\n",
              "      <td>2017</td>\n",
              "      <td>20:30:00</td>\n",
              "      <td>JA324014</td>\n",
              "      <td>2017-06-26 20:30:00+00:00</td>\n",
              "      <td>THEFT</td>\n",
              "      <td>False</td>\n",
              "      <td>summer</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>500000 rows × 10 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "              date  month  day  ...          primary_type domestic  season\n",
              "0       2005-09-22      9   22  ...     CRIMINAL TRESPASS    False    fall\n",
              "1       2015-12-17     12   17  ...   MOTOR VEHICLE THEFT    False  winter\n",
              "2       2008-03-18      3   18  ...    DECEPTIVE PRACTICE    False  spring\n",
              "3       2009-11-08     11    8  ...               ROBBERY    False    fall\n",
              "4       2004-05-08      5    8  ...     CRIMINAL TRESPASS    False  spring\n",
              "...            ...    ...  ...  ...                   ...      ...     ...\n",
              "499995  2002-12-27     12   27  ...                 THEFT    False  winter\n",
              "499996  2001-11-05     11    5  ...             NARCOTICS    False    fall\n",
              "499997  2008-06-15      6   15  ...  LIQUOR LAW VIOLATION    False  summer\n",
              "499998  2019-02-17      2   17  ...                 THEFT    False  winter\n",
              "499999  2017-06-26      6   26  ...                 THEFT    False  summer\n",
              "\n",
              "[500000 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J__Pfp0aBlBC",
        "outputId": "268e986e-deac-4175-8d52-625d63a90ccc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 714
        }
      },
      "source": [
        "#plot of the relatives amounts of each type of crime\n",
        "plt.figure(figsize = (8,12))\n",
        "df1.groupby(df1['primary_type']).size().sort_values(ascending = True).plot(kind = 'barh')\n",
        "plt.xlabel('Number of Crimes Committed')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x864 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aIwwxBZoxtfm",
        "outputId": "1ced54e6-cc8d-42d0-c5f8-0d9e42a9c431",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        }
      },
      "source": [
        "plt.figure(figsize = (10,5))\n",
        "x=df1.groupby([df1.year]).size().plot.bar()\n",
        "plt.title('Crime Over the Years')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Number of Crimes Acts')\n",
        "plt.show()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2UeLlsVnxBkX",
        "outputId": "474b2c42-9248-4c92-ec9f-2104c8ceb5a6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        }
      },
      "source": [
        "plt.figure(figsize = (8,5))\n",
        "#make graph of crimes per month\n",
        "df1.groupby([df1.month]).size().plot.bar()\n",
        "plt.title('Crime Per Month')\n",
        "plt.xlabel('Month')\n",
        "plt.ylabel('Number of Crimes Acts')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 576x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sma7YzDa_QI0",
        "outputId": "3f3e8f03-34cd-41db-ef26-2c2bc60a9529",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        }
      },
      "source": [
        "plt.figure(figsize = (15,5))\n",
        "df1.groupby([df1.day]).size().plot.bar()\n",
        "plt.title('Crime Per Day Of Month')\n",
        "plt.xlabel('Day')\n",
        "plt.ylabel('Number of Crimes Acts')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GLdx2i4GAZVo",
        "outputId": "cddfdd21-75e4-4780-fe6c-6a130b1d33b7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 326
        }
      },
      "source": [
        "df1.groupby([df1.season]).size().plot.bar()\n",
        "plt.title('Crime Per Season')\n",
        "plt.xlabel('Seasons')\n",
        "plt.ylabel('Number of Crimes Acts')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TLPGCFdAlgNX"
      },
      "source": [
        "Crime_Data_district = df.pivot_table('arrest', aggfunc = np.sum, columns = ['district'], \n",
        "                                         index = df1.date, fill_value = 0)\n",
        "Crime_Data_ward = df.pivot_table('arrest', aggfunc = np.sum, columns = ['ward'], \n",
        "                                         index = df1.date, fill_value = 0)\n",
        "Crime_Data_ca = df.pivot_table('arrest', aggfunc = np.sum, columns = ['community_area'], \n",
        "                                         index = df1.date, fill_value = 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fYWHjR9FFzBB",
        "outputId": "5c621c35-3f45-46b2-d52e-bf0ee84680a8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "arrest_per_year = df.groupby('year')['arrest'].value_counts().rename('Counts').to_frame()\n",
        "arrest_per_year['Percentage'] = (100 * arrest_per_year / arrest_per_year.groupby(level=0).sum())\n",
        "arrest_per_year.reset_index(level=[1],inplace=True)\n",
        "arrest_per_year"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>arrest</th>\n",
              "      <th>Counts</th>\n",
              "      <th>Percentage</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>year</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2001</th>\n",
              "      <td>False</td>\n",
              "      <td>23800</td>\n",
              "      <td>70.683971</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001</th>\n",
              "      <td>True</td>\n",
              "      <td>9871</td>\n",
              "      <td>29.316029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2002</th>\n",
              "      <td>False</td>\n",
              "      <td>23895</td>\n",
              "      <td>71.358180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2002</th>\n",
              "      <td>True</td>\n",
              "      <td>9591</td>\n",
              "      <td>28.641820</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2003</th>\n",
              "      <td>False</td>\n",
              "      <td>23179</td>\n",
              "      <td>70.267075</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2003</th>\n",
              "      <td>True</td>\n",
              "      <td>9808</td>\n",
              "      <td>29.732925</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2004</th>\n",
              "      <td>False</td>\n",
              "      <td>22423</td>\n",
              "      <td>69.038456</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2004</th>\n",
              "      <td>True</td>\n",
              "      <td>10056</td>\n",
              "      <td>30.961544</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2005</th>\n",
              "      <td>False</td>\n",
              "      <td>21486</td>\n",
              "      <td>68.363613</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2005</th>\n",
              "      <td>True</td>\n",
              "      <td>9943</td>\n",
              "      <td>31.636387</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2006</th>\n",
              "      <td>False</td>\n",
              "      <td>21610</td>\n",
              "      <td>69.813271</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2006</th>\n",
              "      <td>True</td>\n",
              "      <td>9344</td>\n",
              "      <td>30.186729</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2007</th>\n",
              "      <td>False</td>\n",
              "      <td>21338</td>\n",
              "      <td>70.024941</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2007</th>\n",
              "      <td>True</td>\n",
              "      <td>9134</td>\n",
              "      <td>29.975059</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008</th>\n",
              "      <td>False</td>\n",
              "      <td>21975</td>\n",
              "      <td>74.481426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008</th>\n",
              "      <td>True</td>\n",
              "      <td>7529</td>\n",
              "      <td>25.518574</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009</th>\n",
              "      <td>False</td>\n",
              "      <td>19734</td>\n",
              "      <td>72.216936</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009</th>\n",
              "      <td>True</td>\n",
              "      <td>7592</td>\n",
              "      <td>27.783064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010</th>\n",
              "      <td>False</td>\n",
              "      <td>18747</td>\n",
              "      <td>72.685329</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010</th>\n",
              "      <td>True</td>\n",
              "      <td>7045</td>\n",
              "      <td>27.314671</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011</th>\n",
              "      <td>False</td>\n",
              "      <td>17743</td>\n",
              "      <td>72.574444</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011</th>\n",
              "      <td>True</td>\n",
              "      <td>6705</td>\n",
              "      <td>27.425556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012</th>\n",
              "      <td>False</td>\n",
              "      <td>16916</td>\n",
              "      <td>73.286544</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012</th>\n",
              "      <td>True</td>\n",
              "      <td>6166</td>\n",
              "      <td>26.713456</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013</th>\n",
              "      <td>False</td>\n",
              "      <td>15345</td>\n",
              "      <td>71.762615</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013</th>\n",
              "      <td>True</td>\n",
              "      <td>6038</td>\n",
              "      <td>28.237385</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014</th>\n",
              "      <td>False</td>\n",
              "      <td>13571</td>\n",
              "      <td>71.546816</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014</th>\n",
              "      <td>True</td>\n",
              "      <td>5397</td>\n",
              "      <td>28.453184</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015</th>\n",
              "      <td>False</td>\n",
              "      <td>13492</td>\n",
              "      <td>73.449834</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015</th>\n",
              "      <td>True</td>\n",
              "      <td>4877</td>\n",
              "      <td>26.550166</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016</th>\n",
              "      <td>False</td>\n",
              "      <td>15165</td>\n",
              "      <td>79.954658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016</th>\n",
              "      <td>True</td>\n",
              "      <td>3802</td>\n",
              "      <td>20.045342</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017</th>\n",
              "      <td>False</td>\n",
              "      <td>15009</td>\n",
              "      <td>80.309273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017</th>\n",
              "      <td>True</td>\n",
              "      <td>3680</td>\n",
              "      <td>19.690727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018</th>\n",
              "      <td>False</td>\n",
              "      <td>14917</td>\n",
              "      <td>79.782853</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018</th>\n",
              "      <td>True</td>\n",
              "      <td>3780</td>\n",
              "      <td>20.217147</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019</th>\n",
              "      <td>False</td>\n",
              "      <td>14239</td>\n",
              "      <td>78.698944</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019</th>\n",
              "      <td>True</td>\n",
              "      <td>3854</td>\n",
              "      <td>21.301056</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020</th>\n",
              "      <td>False</td>\n",
              "      <td>9426</td>\n",
              "      <td>84.130668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020</th>\n",
              "      <td>True</td>\n",
              "      <td>1778</td>\n",
              "      <td>15.869332</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      arrest  Counts  Percentage\n",
              "year                            \n",
              "2001   False   23800   70.683971\n",
              "2001    True    9871   29.316029\n",
              "2002   False   23895   71.358180\n",
              "2002    True    9591   28.641820\n",
              "2003   False   23179   70.267075\n",
              "2003    True    9808   29.732925\n",
              "2004   False   22423   69.038456\n",
              "2004    True   10056   30.961544\n",
              "2005   False   21486   68.363613\n",
              "2005    True    9943   31.636387\n",
              "2006   False   21610   69.813271\n",
              "2006    True    9344   30.186729\n",
              "2007   False   21338   70.024941\n",
              "2007    True    9134   29.975059\n",
              "2008   False   21975   74.481426\n",
              "2008    True    7529   25.518574\n",
              "2009   False   19734   72.216936\n",
              "2009    True    7592   27.783064\n",
              "2010   False   18747   72.685329\n",
              "2010    True    7045   27.314671\n",
              "2011   False   17743   72.574444\n",
              "2011    True    6705   27.425556\n",
              "2012   False   16916   73.286544\n",
              "2012    True    6166   26.713456\n",
              "2013   False   15345   71.762615\n",
              "2013    True    6038   28.237385\n",
              "2014   False   13571   71.546816\n",
              "2014    True    5397   28.453184\n",
              "2015   False   13492   73.449834\n",
              "2015    True    4877   26.550166\n",
              "2016   False   15165   79.954658\n",
              "2016    True    3802   20.045342\n",
              "2017   False   15009   80.309273\n",
              "2017    True    3680   19.690727\n",
              "2018   False   14917   79.782853\n",
              "2018    True    3780   20.217147\n",
              "2019   False   14239   78.698944\n",
              "2019    True    3854   21.301056\n",
              "2020   False    9426   84.130668\n",
              "2020    True    1778   15.869332"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7DWguofiGrW4",
        "outputId": "c636d9dd-2596-4426-f35f-5cc299a440f7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 638
        }
      },
      "source": [
        "\n",
        "## Create a line plot for percentages of successful arrests over time (2001 to present)\n",
        "line_plot = arrest_per_year[arrest_per_year['arrest'] == True]['Percentage']\n",
        "\n",
        "## Configure line plot to make visualizing data cleaner\n",
        "labels = line_plot.index.values\n",
        "fig=plt.figure(figsize=(12, 10))\n",
        "plt.title('Percentages of successful arrests from 2001 to 2020')\n",
        "plt.xlabel(\"Year\")\n",
        "plt.ylabel(\"Successful Arrest Percentage\")\n",
        "plt.xticks(line_plot.index, line_plot.index.values)\n",
        "\n",
        "line_plot.plot(grid=True, marker='o', color='mediumvioletred')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f5e33b9fda0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OFGsvG7yHKcp",
        "outputId": "4b8c6c44-4b45-4b2d-ae3d-0c80d09039fe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 730
        }
      },
      "source": [
        "# calculating total number of incidents per district\n",
        "district_crime = df['district'].value_counts(ascending=True)\n",
        "\n",
        "## Data cleaning\n",
        "district_crime.index = district_crime.index.astype(int)\n",
        "district_crime.index = district_crime.index.astype(str)\n",
        "\n",
        "## Plot bar graph for initial visualization\n",
        "fig=plt.figure(figsize=(14, 12))\n",
        "plt.title(\"Frequency of Crimes Per Chicago Police District\")\n",
        "plt.xlabel(\"Frequency of Crimes\")\n",
        "plt.ylabel(\"Chicago Police District No.\")\n",
        "ax = district_crime.plot(kind='barh')\n",
        "ax.get_xaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1008x864 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hdaVfQMqHIvZ",
        "outputId": "71a010ab-11f8-435b-96de-47957c8f61ea",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 379
        }
      },
      "source": [
        "import matplotlib.patches as mpatches\n",
        "red = mpatches.Patch(color='red', label='Amount of Arrests')\n",
        "blue = mpatches.Patch(color='blue', label='Amount of Crime')\n",
        "\n",
        "\n",
        "#crime per district\n",
        "plt.figure(figsize = (8,5))\n",
        "#plt.hold(True)\n",
        "df.groupby(df['district']).size().plot(kind = 'bar')\n",
        "Crime_Data_district.sum().plot(kind = 'bar', color = 'r')\n",
        "plt.title('District Data')\n",
        "plt.legend(handles=[red, blue])\n",
        "#plt.hold(False)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f5e341bef28>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5X_cezb9XOyy",
        "outputId": "4823398f-4664-43ea-cefd-6a98fe4524e8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 354
        }
      },
      "source": [
        "# Setup and Import data\n",
        "from statsmodels.tsa.stattools import adfuller\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "%matplotlib inline\n",
        "\n",
        "df = pd.read_csv('data(1).csv') \n",
        "df['DateTime'] = pd.to_datetime(df['date'])\n",
        "\n",
        "\n",
        "series = df1.loc[:, 'year'].values\n",
        "df.plot(figsize=(14,8), legend=None, title='a10 - Drug Sales Series');"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-35-ef603e21597a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mseries\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'year'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0mdf1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m14\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlegend\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtitle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'a10 - Drug Sales Series'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    877\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    878\u001b[0m             \u001b[0mmaybe_callable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_if_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 879\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmaybe_callable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    880\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    881\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_is_scalar_access\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1108\u001b[0m         \u001b[0;31m# fall thru to straight lookup\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1109\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1110\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1111\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1112\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_slice_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice_obj\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mslice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m   1057\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1058\u001b[0m         \u001b[0;31m# GH#5667 this will fail if the label is not present in the axis.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1059\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1060\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1061\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_handle_lowerdim_multi_index_axis0\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mxs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   3489\u001b[0m             \u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_index\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdrop_level\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdrop_level\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3490\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3491\u001b[0;31m             \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3492\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3493\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/range.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m    356\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    357\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 358\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    359\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    360\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'year'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vEk5ndoGyUL5"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fwAkPEr_XpXo"
      },
      "source": [
        "result = adfuller(series, autolag='AIC')\n",
        "print(f'ADF Statistic: {result[0]}')\n",
        "print(f'n_lags: {result[1]}')\n",
        "print(f'p-value: {result[1]}')\n",
        "for key, value in result[4].items():\n",
        "    print('Critial Values:')\n",
        "    print(f'   {key}, {value}')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DDMP88idOkU9",
        "outputId": "6c7bf4fa-0708-40b3-f600-eecee1f35c38",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "df1['month']= pd.to_datetime(df1['month'], infer_datetime_format=True)\n",
        "indexeddataset= df1.set_index(['month'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r0jhrd6ZPQsr",
        "outputId": "d2784217-715a-4672-d5f0-668ac2495e05",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        }
      },
      "source": [
        "indexeddataset.head(5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>day</th>\n",
              "      <th>year</th>\n",
              "      <th>time</th>\n",
              "      <th>case_number</th>\n",
              "      <th>DateTime</th>\n",
              "      <th>primary_type</th>\n",
              "      <th>domestic</th>\n",
              "      <th>season</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>month</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1970-01-01 00:00:00.000000009</th>\n",
              "      <td>2005-09-22</td>\n",
              "      <td>22</td>\n",
              "      <td>2005</td>\n",
              "      <td>19:55:41</td>\n",
              "      <td>HL629300</td>\n",
              "      <td>2005-09-22 19:55:41+00:00</td>\n",
              "      <td>CRIMINAL TRESPASS</td>\n",
              "      <td>False</td>\n",
              "      <td>fall</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1970-01-01 00:00:00.000000012</th>\n",
              "      <td>2015-12-17</td>\n",
              "      <td>17</td>\n",
              "      <td>2015</td>\n",
              "      <td>00:01:00</td>\n",
              "      <td>HY540220</td>\n",
              "      <td>2015-12-17 00:01:00+00:00</td>\n",
              "      <td>MOTOR VEHICLE THEFT</td>\n",
              "      <td>False</td>\n",
              "      <td>winter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1970-01-01 00:00:00.000000003</th>\n",
              "      <td>2008-03-18</td>\n",
              "      <td>18</td>\n",
              "      <td>2008</td>\n",
              "      <td>17:00:00</td>\n",
              "      <td>HP312801</td>\n",
              "      <td>2008-03-18 17:00:00+00:00</td>\n",
              "      <td>DECEPTIVE PRACTICE</td>\n",
              "      <td>False</td>\n",
              "      <td>spring</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1970-01-01 00:00:00.000000011</th>\n",
              "      <td>2009-11-08</td>\n",
              "      <td>8</td>\n",
              "      <td>2009</td>\n",
              "      <td>18:00:00</td>\n",
              "      <td>HR633143</td>\n",
              "      <td>2009-11-08 18:00:00+00:00</td>\n",
              "      <td>ROBBERY</td>\n",
              "      <td>False</td>\n",
              "      <td>fall</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1970-01-01 00:00:00.000000005</th>\n",
              "      <td>2004-05-08</td>\n",
              "      <td>8</td>\n",
              "      <td>2004</td>\n",
              "      <td>03:30:00</td>\n",
              "      <td>HK350115</td>\n",
              "      <td>2004-05-08 03:30:00+00:00</td>\n",
              "      <td>CRIMINAL TRESPASS</td>\n",
              "      <td>False</td>\n",
              "      <td>spring</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                     date  day  ...  domestic  season\n",
              "month                                           ...                  \n",
              "1970-01-01 00:00:00.000000009  2005-09-22   22  ...     False    fall\n",
              "1970-01-01 00:00:00.000000012  2015-12-17   17  ...     False  winter\n",
              "1970-01-01 00:00:00.000000003  2008-03-18   18  ...     False  spring\n",
              "1970-01-01 00:00:00.000000011  2009-11-08    8  ...     False    fall\n",
              "1970-01-01 00:00:00.000000005  2004-05-08    8  ...     False  spring\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nji9QrYfLG9A"
      },
      "source": [
        "import statsmodels\n",
        "from statsmodels.tsa.stattools import adfuller\n",
        "import pandas as pd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "glb_1tzdLLnr"
      },
      "source": [
        "class StationarityTests:\n",
        "  def __init__(self, significance=.05):\n",
        "    self.SignificanceLevel = significance\n",
        "    self.pValue = None\n",
        "    self.isStationary = None"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A9egNRitLRb_"
      },
      "source": [
        "def ADF_Stationarity_Test(self, timeseries, printResults = True):\n",
        "\n",
        "  #Dickey-Fuller test:\n",
        "  adfTest = adfuller(timeseries, autolag='AIC')\n",
        "  self.pValue = adfTest[1]\n",
        "  if (self.pValue<self.SignificanceLevel):\n",
        "      self.isStationary = True\n",
        "  else:\n",
        "      self.isStationary = False\n",
        "\n",
        "  if printResults:\n",
        "      dfResults = pd.Series(adfTest[0:4], index=['ADF Test Statistic','P-Value','# Lags Used','# Observations Used'])\n",
        "\n",
        "      #Add Critical Values\n",
        "      for key,value in adfTest[4].items():\n",
        "        dfResults['Critical Value (%s)'%key] = value\n",
        "\n",
        "      print('Augmented Dickey-Fuller Test Results:')\n",
        "      print(dfResults)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ORDn52kJLz7n",
        "outputId": "96888e1b-1668-489b-d345-3c59ab4f9c84",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        }
      },
      "source": [
        "sTest = StationarityTests()\n",
        "sTest.ADF_Stationarity_Test(x, printResults = True)\n",
        "print(\"Is the time series stationary? {0}\".format(sTest.isStationary))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-28-1d8a347760e5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0msTest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStationarityTests\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0msTest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mADF_Stationarity_Test\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprintResults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Is the time series stationary? {0}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msTest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misStationary\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'StationarityTests' object has no attribute 'ADF_Stationarity_Test'"
          ]
        }
      ]
    }
  ]
}
